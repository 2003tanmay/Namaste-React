/******************************** Ep 4 ******************************************/

In this episode we learn how we create any project, how we plan things.

1. Plan the things.
    a. Header
        I. Logo
        II. Linkes - Home, About, Cart, etc
    b. Body
        I. SearchBar
        II. Restaurent Card
            A. Image
            B. Name
            C. Rating
            D. Price
    c. Footer
        I. Copyright
        II. Linkes

2. Low level planning
Components
    I. Header
        A. Logo
        B. Nav Item
    II. Body
        A. Search
        B. RestaurentContainer
        C. RestaurentCard
    III. Footer
        A. Copyright
        B. Linkes
        C. Adress
        D. Contact

N1 : Ways of defining inline css in react component JSX?
Ans : 
const resStyle = {
    color: 'red',
    fontSize: '20px',
};

const RestaurentCard = () => {
    return (
        1. <div className="res-card1" style= {{border: "1px solid black",backgroundColor: "red"}}></div>
        2. <div className="res-card2" style = {resStyle} ></div>
    );
}

N2 : What is props?
Ans : props defines properties of component, it is like arguments to the functions.

Q1 : What is config driven UI? (UI looks according to the config data)
Ans: UI is generated from configuration data (like JSON) instead of hardcoding. Change config â†’ UI changes automatically. âœ…

Q2 : Why we use key when we use looping like map or for loop? 
Ans: We use key in loops so React can uniquely identify elements, track changes, and re-render efficiently without messing up the DOM. React needs key to know which list items changed, added, or removed, so it can update the DOM efficiently instead of re-rendering everything. âœ…

Q3 : Why using index as a key is a bad practice?
Ans: because if the list items change (add/remove/reorder), React may confuse items, causing wrong updates, bugs, or UI glitches. âœ…

/******************************** Ep 5 ******************************************/

Q4 : Why we use export default while exporting things? What is differance between named and default export?
Ans: Default export â†’ only one export per file, import without {}, can rename while importing.
Named export â†’ many exports per file, must import with {}, name must match .

Q5 : Why some use .js and .jsx for defining component file and while importing why some not us extension and some use whole name like Header.js or Header.jsx?
Ans: .js & .jsx both work the same in React. .jsx just makes it clear that the file contains JSX syntax.

N3 : What is React Hooks? why we use it?
Ans : It is a normal JS utilities functions. We use useState react hooks instead of normal variable because normal one can't sync with the data coming. Let we uses const for data so now when data changes it give error because const can not be change. If we uses let our data changes but our UI will not change because react will not make any changes in UI. So we need a thing which can change and also changes the UI. Whenever a state variable changes react will re rende rthe component.

Q6 : What are useState and useEffect hooks? 
ans: ðŸ”¹ useState = A React Hook to add state (data that changes) to a functional component.
ðŸ”¹ useEffect = A hook for handling side effects (things outside Reactâ€™s rendering, like API calls, timers, subscriptions, DOM changes).

Q7 : What is virtual DOM and how it works behind the scene in React?
Ans: The Virtual DOM (VDOM) is a lightweight copy of the real DOM that React keeps in memory. Instead of updating the real DOM directly (which is slow), React updates the virtual DOM first.

ðŸ”¹ How it works behind the scenes:
1. Render: Your React code creates a virtual DOM tree (JS objects representing UI).
2. Diffing: When state/props change, React builds a new virtual DOM tree and compares it with the old one (diffing algorithm).
3. Reconciliation: React finds only the parts that actually changed.
4. Update real DOM: React updates those minimal changes in the real DOM â†’ making it fast and efficient.

N4: What is Diff algorithm?
Ans: When Reactâ€™s state or props change, React builds a new Virtual DOM tree. It compares the new tree with the previous Virtual DOM tree â†’ this process is called diffing. Since comparing two full DOM trees is expensive (O(nÂ³)), React uses some smart heuristics:

Reactâ€™s Diffing Rules :
1. If the element type is the same (<div> â†’ <div>), React keeps the node and just updates attributes/props.
2. If the type is different (<div> â†’ <p>), React destroys the old node and creates a new one.
3. React goes through child elements in order and compares them.
4. If you use keys, React can efficiently match old vs new children (even if their order changed). If no key is given â†’ React falls back to index, which may cause bugs or unnecessary re-renders.

